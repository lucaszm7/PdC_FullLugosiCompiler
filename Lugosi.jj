PARSER_BEGIN(Lugosi)
import java.io.*;
import java.util.ArrayList;

class ArvoreSintatica
{
  ArrayList<Comando> arvore;

  ArvoreSintatica(ArrayList ar)
  {
    this.arvore = ar;
  }
}

abstract class Comando 
{
  abstract public String toString(); 
}

class Exp extends Comando
{
  public Exp exp;

  public String toString()
  {return "";}
}

class Var extends Exp
{
  String id;

  Var(String id)
  {this.id = id;}

  public String toString()
  {
    if(exp != null)
    {
      return id + " " + exp.toString();
    }
    else
    {
      return id;
    }
  }
}

class NumReal extends Exp
{
  String numReal;

  NumReal(String nNum)
  {this.numReal = nNum;}

  public String toString()
  {
    if(exp != null)
    {
      return numReal + " " + exp.toString();
    }
    else
    {
      return numReal;
    }
  }
}

class Opt extends Exp
{
  String opt;

  Opt(String opt)
  {this.opt = opt;}

  public String toString()
  {
    if(exp != null)
    {
      return opt + " " + exp.toString();
    }
    else
    {
      return opt;
    }
  }
}

class Verdadeiro extends Exp
{
  Verdadeiro()
  {}

  public String toString()
  {
    if(exp != null)
    {
      return "true" + " " + exp.toString();
    }
    else
    {
      return "true";
    }
  }
}

class Falso extends Exp
{
  Falso()
  {}

  public String toString()
  {
    if(exp != null)
    {
      return "false" + " " + exp.toString();
    }
    else
    {
      return "false";
    }
  }
}

class FuncCall extends Exp
{
  String id;


  FuncCall(String id, Exp exp)
  {this.id = id; this.exp = exp;}

  public String toString()
  {
    if(exp != null)
    {
      return id + "(" + exp.toString() + ")";
    }
    else
    {
      return id + "()";
    }
  }
}


class Atrib extends Comando
{
  String id;
  Exp exp;

  Atrib(String nId, Exp nExp)
  {this.id = nId; this.exp = nExp;}

  public String toString()
  {
    return id + " = " + exp.toString();
  }
}

class VarDecl extends Comando
{
  String tipo;
  String token_id;

  VarDecl(String t, String tid)
  {this.tipo = t; this.token_id = tid;}

  public String toString()
  {
    return this.tipo + " " + this.token_id;
  }
}

class FuncId extends Comando
{
  String tipo;
  String id;
  ArrayList<VarDecl> args;

  FuncId(String t, String id, ArrayList<VarDecl> args)
  {
    this.tipo = t;
    this.id = id;
    this.args = args;
  }

  public String toString()
  {
    String result = this.tipo + " " + this.id + "(";
    for(VarDecl s : this.args)
    {
      result += s.toString() + ", ";
    }
    result += "void n=null";
    result += ")";
    return result;
  }
}


class CondIf extends Comando
{
  Exp exp;
  
  CondIf(Exp exp)
  {this.exp = exp;}

  public String toString()
  {return "if (" + exp.toString() + ")";}
}
class CondElse extends Comando
{
  CondElse(){}

  public String toString()
  {return "else";}
}
class While extends Comando
{
  Exp exp;

  While(Exp exp)
  {this.exp = exp;}

  public String toString()
  {return "while(" + exp.toString() + ") do ";}
}
class Do extends Comando
{
  Exp exp;

  Do(Exp exp)
  {this.exp = exp;}

  public String toString()
  {return " - ";}
}

class Return extends Comando
{
  Exp exp;
 
  Return(Exp exp)
  {this.exp = exp;}
  
  public String toString()
  {
    if(exp != null)
    {
      return "return " + exp.toString();
    }
    else
    {
      return "return";
    }
  }
}

class Print extends Comando
{
  Exp exp;

  Print(Exp exp)
  {this.exp = exp;}

  public String toString()
  {
    if(exp != null)
    {
      return "print(" + exp.toString() + ")";
    }
    else
    {
      return "print()";
    }
  }
}

public class Lugosi 
{
  public static void main(String args[]) throws ParseException, IOException 
  {
    Lugosi parser = new Lugosi(new FileInputStream(args[0]));
    ArvoreSintatica arvore = parser.Lugosi();

    geraCodigo(arvore, args[0]);

  }

  public static void geraCodigo(ArvoreSintatica arvore, String FileName)
  {
    for(Comando v : arvore.arvore)
    {
      System.out.println(v.toString());
    }
    return;
  }

}


PARSER_END(Lugosi)

SKIP:
{
  " "
| "\t"
| "\n"
| "\r"
}

// PALAVRAS RESERVADAS
TOKEN :
{
  <MAIN: "main">
| <VARIAVEL: "var">
| <INTEIRO: "int">
| <BOOLEANO: "bool">
| <FLOAT: "float">
| <VOID: "void">
| <IF : "if">
| <ELSE : "else">
| <DO : "do">
| <WHILE : "while">
| <RETURN : "return">
| <FUNCAO : "function">
| <PRINT : "print">
| <VERDADEIRO: "true">
| <FALSO: "false">
}

// OPERACOES
TOKEN :
{
  <ADICAO: "+">
| <SUBTRACAO : "-">
| <MULTIPLICACAO : "*">
| <DIVISAO : "/">
| <ELOGICO : "&&">
| <OULOGICO : "||">
| <MENORQUE : "<">
| <MAIORQUE : ">">
| <IGUALDADE : "==">
| <ATRIBUICAO: ":=">
}

// SEPARADORES
TOKEN :
{
  <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENTES: "(">
| <FPARENTES: ")">
| <PONTOEVIRGULA: ";">
| <DOISPONTOS: ":">
| <VIRGULA: ",">
}

// EXPRESSÕES REGULARES
TOKEN :
{
  <#NUM: (["0"-"9"])+>
| < ID: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9"])*>
}

// EXPRESSÕES REGULARES DERIVADAS
TOKEN :
{
  <#FRACALOPCIONAL: ( "." <NUM> )?>
| <#EXPOENTEOPCIONAL: ("E" ( "+" | "-" )? <NUM>)?>
| <NUMREAL: <NUM> <FRACALOPCIONAL> <EXPOENTEOPCIONAL>>
}

/*
LUGOSI -> MAIN FUNC?
MAIN -> "main" "{" VARDECL SEQCOMANDOS "}"
VARDECL -> VARDECL "var" TIPO TOKEN_id ";" | vazio
TIPO -> "int" | "bool" | "float" | "void"
SEQCOMANDOS -> SEQCOMANDOS COMANDO | vazio
COMANDO -> TOKEN_id ":=" EXP ";"
| TOKEN_id "(" LISTAEXP? ")" ";"
| "if" "(" EXP ")" "{" SEQCOMANDOS "}" ";"
| "while" "(" EXP ")" "do" "{" SEQCOMANDOS "}" ";"
| "do" "{" SEQCOMANDOS "}" "while" "(" EXP ")" ";"
| "return" EXP ";"
| "print" "(" EXP ")" ";"
EXP -> "(" EXP OP EXP ")" | FATOR
FATOR -> TOKEN_id | TOKEN_id "(" LISTAEXP? ")"
| TOKEN_numliteral | "true" | "false"
OP -> "+" | "-" | "*" | "/" | "&&" | "||" | "<" | ">" | "=="
LISTAEXP -> EXP | LISTAEXP "," EXP
FUNC -> FUNC "function" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
| "function" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
LISTAARG -> TIPO TOKEN_id | LISTAARG "," TIPO TOKEN_id
*/

ArvoreSintatica Lugosi ()
:
{ArrayList arvore = new ArrayList();}
{
    Main(arvore) (Func(arvore))?
    <EOF> 
    {
      System.out.println("===============================");
      System.out.println("Arquivo Corretamente escrito!!!");
      System.out.println("===============================");
      return new ArvoreSintatica(arvore);
    }
}

void Main (ArrayList arvore)
:
{}
{
    <MAIN> <ACHAVES> (VarDecl(arvore))? (SeqComandos(arvore))? <FCHAVES>
}

void VarDecl(ArrayList arvore)
:
{String t = null; Token id = null;}
{
    <VARIAVEL> t=Tipo() id=<ID> {arvore.add(new VarDecl(t, id.image));} <PONTOEVIRGULA> VarDeclL(arvore)
}
void VarDeclL(ArrayList arvore)
:
{String t = null; Token id = null;}
{
    (<VARIAVEL> t=Tipo() id=<ID> {arvore.add(new VarDecl(t, id.image));} <PONTOEVIRGULA> VarDeclL(arvore))?
}

String Tipo()
:
{Token t;}
{
(
  (t=<INTEIRO>)
| (t=<BOOLEANO>)
| (t=<FLOAT>)
| (t=<VOID>)
)

{return t.image;}
}

void SeqComandos(ArrayList arvore)
:
{}
{
  Comandos(arvore) SeqComandosL(arvore)
}

void SeqComandosL(ArrayList arvore)
:
{}
{
  (Comandos(arvore) SeqComandosL(arvore))?
}

void Comandos(ArrayList arvore)
:
{Token t;
 Exp exp=null; CondIf condif=null; CondElse condelse=null; While cwhile=null; 
 Do cDo=null; Return cReturn=null; Print cprint=null;}
{
  (t=<ID> exp=ComandosL(t.image, arvore))
| (<IF> <APARENTES> exp=Exp() {arvore.add(new CondIf(exp));} <FPARENTES> <ACHAVES> SeqComandos(arvore) <FCHAVES> <PONTOEVIRGULA>)
| (<ELSE> <ACHAVES> SeqComandos(arvore) <FCHAVES> <PONTOEVIRGULA> {arvore.add(new CondElse());})
| (<WHILE> <APARENTES> exp=Exp() {arvore.add(new While(exp));} <FPARENTES> <DO> <ACHAVES> SeqComandos(arvore) <FCHAVES> <PONTOEVIRGULA> )
| (<DO> <ACHAVES> SeqComandos(arvore) <FCHAVES> <WHILE> <APARENTES> exp=Exp() {arvore.add(new Do(exp));} <FPARENTES>  <PONTOEVIRGULA> )
| (<RETURN> exp=Exp() {arvore.add(new Return(exp));} <PONTOEVIRGULA> )
| (<PRINT> <APARENTES> exp=Exp() {arvore.add(new Print(exp));} <FPARENTES> <PONTOEVIRGULA> )
}

Exp ComandosL(String id, ArrayList arvore) :
{Exp exp=null;}
{
(
  (<ATRIBUICAO> exp=Exp() <PONTOEVIRGULA> {arvore.add(new Atrib(id, exp));})
| (<APARENTES> (exp=ListaExp())? <FPARENTES> <PONTOEVIRGULA> {arvore.add(new FuncCall(id, exp));})
)
{return exp;}
}

Exp Exp() 
:
{String t=null; Exp exp=null;}
{
(
  (<APARENTES> exp=Exp() exp.exp=Op() exp.exp.exp=Exp() <FPARENTES>) 
| (exp=Fator())
)
{return exp;}
}

Exp Fator()
:
{Exp exp=null; Token t;
 NumReal nreal=null; Verdadeiro v=null; Falso f=null;}
{
  (t=<ID> exp=FatorL() {
    if(exp != null)
    {
      return new FuncCall(t.image, exp);
    }
    else
    {
      return new Var(t.image);
    }
  })
| (t=<NUMREAL> {return new NumReal(t.image);})
| (<VERDADEIRO> {return new Verdadeiro();})
| (<FALSO> {return new Falso();})
}


Exp FatorL()
:
{Exp exp=null;}
{
  (<APARENTES> exp=ListaExp() <FPARENTES>)?
  {return exp;}
}

Exp Op()
:
{Token t;}
{
(
  (t=<ADICAO>)
| (t=<SUBTRACAO>)
| (t=<MULTIPLICACAO>)
| (t=<DIVISAO>)
| (t=<ELOGICO>)
| (t=<OULOGICO>)
| (t=<MENORQUE>)
| (t=<MAIORQUE>)
| (t=<IGUALDADE>)
)
  {return new Opt(t.image);}
}

Exp ListaExp()
:
{Exp exp=null;}
{
  (exp=Exp() exp.exp=ListaExpL())
  {return exp;}
}

Exp ListaExpL() :
{Exp exp=null;}
{
  (
    (<PONTOEVIRGULA> exp=Exp() exp.exp=ListaExpL())
  )?
    {return exp;}
}

void Func(ArrayList arvore) :
{String t=null; Token id; ArrayList<VarDecl> lArgs = new ArrayList();}
{
  <FUNCAO> t=Tipo() id=<ID> <APARENTES> (ListaArgs(lArgs))? {arvore.add(new FuncId(t, id.image, lArgs));} <FPARENTES>
  <ACHAVES> (VarDecl(arvore))? (SeqComandos(arvore))? <FCHAVES> FuncL(arvore)
}

void FuncL(ArrayList arvore) :
{String t=null; Token id; ArrayList<VarDecl> lArgs = new ArrayList();}
{
  (<FUNCAO> t=Tipo() id=<ID> <APARENTES> (ListaArgs(lArgs))? {arvore.add(new FuncId(t, id.image, lArgs));} <FPARENTES>
   <ACHAVES> (VarDecl(arvore))? (SeqComandos(arvore))? <FCHAVES> FuncL(arvore))?
}

void ListaArgs(ArrayList<VarDecl> lArgs) :
{String t=null; Token id;}
{
  t=Tipo() id=<ID> {lArgs.add(new VarDecl(t, id.image));} ListaArgsL(lArgs)
}

void ListaArgsL(ArrayList<VarDecl> lArgs) :
{String t=null; Token id;}
{
  (<VIRGULA> t=Tipo() id=<ID> {lArgs.add(new VarDecl(t, id.image));} ListaArgsL(lArgs))?
}
