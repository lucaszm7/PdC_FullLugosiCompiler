PARSER_BEGIN(Lugosi)
import java.io.*;
import java.util.ArrayList;

class ArvoreSintatica
{
  ArrayList<Comando> arvore;

  ArvoreSintatica(ArrayList ar)
  {
    this.arvore = ar;
  }
}

class Comando {}

class VarDecl extends Comando
{
  String tipo;
  String token_id;

  VarDecl(String t, String tid)
  {this.tipo = t; this.token_id = tid;}
}



public class Lugosi 
{
  public static void main(String args[]) throws ParseException, IOException 
  {
    Lugosi parser = new Lugosi(new FileInputStream(args[0]));
    ArvoreSintatica arvore = parser.Lugosi();

    geraCodigo(arvore, args[0]);

  }

  public static void geraCodigo(ArvoreSintatica arvore, String FileName)
  {
    return;
  }

}


PARSER_END(Lugosi)

SKIP:
{
  " "
| "\t"
| "\n"
| "\r"
}

// PALAVRAS RESERVADAS
TOKEN :
{
  <MAIN: "main">
| <VARIAVEL: "var">
| <INTEIRO: "int">
| <BOOLEANO: "bool">
| <FLOAT: "float">
| <VOID: "void">
| <IF : "if">
| <ELSE : "else">
| <DO : "do">
| <WHILE : "while">
| <RETURN : "return">
| <FUNCAO : "function">
| <PRINT : "print">
| <VERDADEIRO: "true">
| <FALSO: "false">
}

// OPERACOES
TOKEN :
{
  <ADICAO: "+">
| <SUBTRACAO : "-">
| <MULTIPLICACAO : "*">
| <DIVISAO : "/">
| <ELOGICO : "&&">
| <OULOGICO : "||">
| <MENORQUE : "<">
| <MAIORQUE : ">">
| <IGUALDADE : "==">
| <ATRIBUICAO: ":=">
}

// SEPARADORES
TOKEN :
{
  <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENTES: "(">
| <FPARENTES: ")">
| <PONTOEVIRGULA: ";">
| <DOISPONTOS: ":">
| <VIRGULA: ",">
}

// EXPRESSÕES REGULARES
TOKEN :
{
  <#NUM: (["0"-"9"])+>
| < ID: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9"])*>
}

// EXPRESSÕES REGULARES DERIVADAS
TOKEN :
{
  <#FRACALOPCIONAL: ( "." <NUM> )?>
| <#EXPOENTEOPCIONAL: ("E" ( "+" | "-" )? <NUM>)?>
| <NUMREAL: <NUM> <FRACALOPCIONAL> <EXPOENTEOPCIONAL>>
}

/*
LUGOSI -> MAIN FUNC?
MAIN -> "main" "{" VARDECL SEQCOMANDOS "}"
VARDECL -> VARDECL "var" TIPO TOKEN_id ";" | vazio
TIPO -> "int" | "bool" | "float" | "void"
SEQCOMANDOS -> SEQCOMANDOS COMANDO | vazio
COMANDO -> TOKEN_id ":=" EXP ";"
| TOKEN_id "(" LISTAEXP? ")" ";"
| "if" "(" EXP ")" "{" SEQCOMANDOS "}" ";"
| "while" "(" EXP ")" "do" "{" SEQCOMANDOS "}" ";"
| "do" "{" SEQCOMANDOS "}" "while" "(" EXP ")" ";"
| "return" EXP ";"
| "print" "(" EXP ")" ";"
EXP -> "(" EXP OP EXP ")" | FATOR
FATOR -> TOKEN_id | TOKEN_id "(" LISTAEXP? ")"
| TOKEN_numliteral | "true" | "false"
OP -> "+" | "-" | "*" | "/" | "&&" | "||" | "<" | ">" | "=="
LISTAEXP -> EXP | LISTAEXP "," EXP
FUNC -> FUNC "function" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
| "function" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
LISTAARG -> TIPO TOKEN_id | LISTAARG "," TIPO TOKEN_id
*/

ArvoreSintatica Lugosi ()
:
{ArrayList arvore = new ArrayList();}
{
    Main() (Func())?
    <EOF> 
    {
      System.out.println("===============================");
      System.out.println("Arquivo Corretamente escrito!!!");
      System.out.println("===============================");
      return new ArvoreSintatica(arvore);
    }
}

void Main ()
:
{}
{
    <MAIN> <ACHAVES> VarDecl() SeqComandos() <FCHAVES>
}

void VarDecl()
:
{}
{
    <VARIAVEL> Tipo() <ID> <PONTOEVIRGULA> VarDeclL()
}
void VarDeclL()
:
{}
{
    (<VARIAVEL> Tipo() <ID> <PONTOEVIRGULA> VarDeclL())?
}

void Tipo()
:
{}
{
  <INTEIRO> | <BOOLEANO> | <FLOAT> | <VOID>
}

void SeqComandos()
:
{}
{
  Comandos() SeqComandosL()
}

void SeqComandosL()
:
{}
{
  (Comandos() SeqComandosL())?
}

void Comandos()
:
{}
{
  <ID> ComandosL()
| <IF> <APARENTES> Exp() <FPARENTES> <ACHAVES> SeqComandos() <FCHAVES> <PONTOEVIRGULA>
| <ELSE> <ACHAVES> SeqComandos() <FCHAVES> <PONTOEVIRGULA>
| <WHILE> <APARENTES> Exp() <FPARENTES> <DO> <ACHAVES> SeqComandos() <FCHAVES> <PONTOEVIRGULA>
| <DO> <ACHAVES> SeqComandos() <FCHAVES> <WHILE> <APARENTES> Exp() <FPARENTES>  <PONTOEVIRGULA>
| <RETURN> Exp() <PONTOEVIRGULA>
| <PRINT> <APARENTES> Exp() <FPARENTES> <PONTOEVIRGULA>
}

void ComandosL() :
{}
{
  <ATRIBUICAO> Exp() <PONTOEVIRGULA> 
| <APARENTES> (ListaExp())? <FPARENTES> <PONTOEVIRGULA>
}

void Exp()
:
{}
{
  <APARENTES> Exp() Op() Exp() <FPARENTES> | Fator()
}

void Fator()
:
{}
{
  <ID> FatorL() | <NUMREAL> | <VERDADEIRO> | <FALSO>
}


void FatorL()
:
{}
{
  (<APARENTES> ListaExp() <FPARENTES>)?
}

void Op()
:
{}
{
  <ADICAO>
| <SUBTRACAO>
| <MULTIPLICACAO>
| <DIVISAO>
| <ELOGICO>
| <OULOGICO>
| <MENORQUE>
| <MAIORQUE>
| <IGUALDADE>
}

void ListaExp()
:
{}
{
  Exp() ListaExpL()
}

void ListaExpL() :
{}
{
  (<PONTOEVIRGULA> Exp() ListaExpL())?
}

void Func() :
{}
{
  <FUNCAO> Tipo() <ID> <APARENTES> (ListaArgs())? <FPARENTES>
  <ACHAVES> (VarDecl())? (SeqComandos())? <FCHAVES> FuncL()
}

void FuncL() :
{}
{
  (<FUNCAO> Tipo() <ID> <APARENTES> (ListaArgs())? <FPARENTES>
   <ACHAVES> (VarDecl())? (SeqComandos())? <FCHAVES> FuncL())?
}

void ListaArgs() :
{}
{
  Tipo() <ID> ListaArgsL()
}

void ListaArgsL() :
{}
{
  (<VIRGULA> Tipo() <ID> ListaArgsL())?
}
